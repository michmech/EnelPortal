function start(){	var xml=$("#txtXml").val();	Xonomy.render(xml, document.getElementById("editor"), docSpec);	// $(document).keyup(function(e){		// if(e.keyCode==27) parent.closeEditor();	// });}function beforeSave(){	var xml=Xonomy.harvest();	$("#txtXml").val(xml);}var langs=[	{value: "sq", caption: "Albanian"},	{value: "hy", caption: "Armenian"},	{value: "rup", caption: "Aromanian"},	{value: "ast", caption: "Asturian"},	{value: "eu", caption: "Basque"},	{value: "br", caption: "Breton"},	{value: "bg", caption: "Bulgarian"},	{value: "ca", caption: "Catalan"},	{value: "kw", caption: "Cornish"},	{value: "hr", caption: "Croatian"},	{value: "cs", caption: "Czech"},	{value: "da", caption: "Danish"},	{value: "nl", caption: "Dutch"},	{value: "en", caption: "English"},	{value: "et", caption: "Estonian"},	{value: "fo", caption: "Faroese"},	{value: "fi", caption: "Finnish"},	{value: "fr", caption: "French"},	{value: "fy", caption: "Frisian"},	{value: "gl", caption: "Galician"},	{value: "de", caption: "German"},	{value: "el", caption: "Greek"},	{value: "he", caption: "Hebrew"},	{value: "hu", caption: "Hungarian"},	{value: "is", caption: "Icelandic"},	{value: "ga", caption: "Irish"},	{value: "it", caption: "Italian"},	{value: "krl", caption: "Karelian"},	{value: "kom", caption: "Komi"},	{value: "la", caption: "Latin"},	{value: "lv", caption: "Latvian"},	{value: "lt", caption: "Lithuanian"},	{value: "lmo", caption: "Lombard"},	{value: "lb", caption: "Luxembourgish"},	{value: "mk", caption: "Macedonian"},	{value: "mt", caption: "Maltese"},	{value: "gv", caption: "Manx"},	{value: "mord", caption: "Mordvinian"},	{value: "no", caption: "Norwegian"},	{value: "oc", caption: "Occitan"},	{value: "pl", caption: "Polish"},	{value: "pt", caption: "Portuguese"},	{value: "ro", caption: "Romanian"},	{value: "rm", caption: "Romansh"},	{value: "ru", caption: "Russian"},	{value: "smi", caption: "Sami"},	{value: "sc", caption: "Sardinian"},	{value: "sco", caption: "Scots"},	{value: "gd", caption: "Scottish Gaelic"},	{value: "sr", caption: "Serbian"},	{value: "sk", caption: "Slovak"},	{value: "sl", caption: "Slovene"},	{value: "wen", caption: "Sorbian"},	{value: "es", caption: "Spanish"},	{value: "sv", caption: "Swedish"},	{value: "tr", caption: "Turkish"},	{value: "uk", caption: "Ukrainian"},	{value: "vep", caption: "Vepsian"},	{value: "cy", caption: "Welsh"},	{value: "yi", caption: "Yiddish"},		{value: "sqk", caption: "Albanian Sign Language"},	{value: "aen", caption: "Armenian Sign Language"},	{value: "asq", caption: "Austrian Sign Language"},	{value: "bfi", caption: "British Sign Language"},	{value: "bqn", caption: "Bulgarian Sign Language"},	{value: "csc", caption: "Catalan Sign Language"},	{value: "csq", caption: "Croatia Sign Language"},	{value: "cse", caption: "Czech Sign Language"},	{value: "dsl", caption: "Danish Sign Language"},	{value: "dse", caption: "Dutch Sign Language"},	{value: "eso", caption: "Estonian Sign Language"},	{value: "fss", caption: "Finland-Swedish Sign Language"},	{value: "fse", caption: "Finnish Sign Language"},	{value: "vgt", caption: "Flemish Sign Language"},	{value: "sfb", caption: "French Belgian Sign Language"},	{value: "fsl", caption: "French Sign Language"},	{value: "gsg", caption: "German Sign Language"},	{value: "gss", caption: "Greek Sign Language"},	{value: "hsh", caption: "Hungarian Sign Language"},	{value: "icl", caption: "Icelandic Sign Language"},	{value: "isg", caption: "Irish Sign Language"},	{value: "isr", caption: "Israeli Sign Language"},	{value: "ise", caption: "Italian Sign Language"},	{value: "lsl", caption: "Latvian Sign Language"},	{value: "lls", caption: "Lithuanian Sign Language"},	{value: "mdl", caption: "Maltese Sign Language"},	{value: "vsi", caption: "Moldova Sign Language"},	{value: "nsl", caption: "Norwegian Sign Language"},	{value: "pso", caption: "Polish Sign Language"},	{value: "psr", caption: "Portuguese Sign Language"},	{value: "rms", caption: "Romanian Sign Language"},	{value: "rsl", caption: "Russian Sign Language"},	{value: "svk", caption: "Slovak Sign Language"},	{value: "ssp", caption: "Spanish Sign Language"},	{value: "swl", caption: "Swedish Sign Language"},	{value: "ssr", caption: "Swiss-French Sign Language"},	{value: "sgg", caption: "Swiss-German Sign Language"},	{value: "slf", caption: "Swiss-Italian Sign Language"},	{value: "tsm", caption: "Turkish Sign Language"},	{value: "ukl", caption: "Ukrainian Sign Language"},	{value: "vsv", caption: "Valencian Sign Language"},	{value: "ysl", caption: "Yugoslavian Sign Language"},	];var dicTypes=[	{value: "gen", caption: "General dictionaries"},	{value: "por", caption: "Portals and aggregators"},	{value: "lrn", caption: "Learner's dictionaries"},	{value: "spe", caption: "Dictionaries on special topics"},	{value: "ort", caption: "Orthographic dictionaries"},	{value: "ety", caption: "Etymological dictionaries"},	{value: "his", caption: "Historical dictionaries"},	{value: "trm", caption: "Terminological dictionaries"},];function addIncludedDictionary(htmlID, parameter){	var js=Xonomy.xml2js(Xonomy.harvest());	var html="<dictionary";	html+=" prominence='"+js.getAttributeValue("prominence", "5")+"'";	html+=" loginRequired='"+js.getAttributeValue("loginRequired", "0")+"'";	html+=" tcRequired='"+js.getAttributeValue("tcRequired", "0")+"'";	html+=">";	var kids=js.getChildElements("objLang"); for(var i=0; i<kids.length; i++) {		html+="<objLang code='"+kids[i].getAttributeValue("code", "")+"'/>";	} if(kids.length==0) html+="<objLang code=''/>";	html+="<dicType code=''/>";	var kids=js.getChildElements("metaLang"); for(var i=0; i<kids.length; i++) {		html+="<metaLang code='"+kids[i].getAttributeValue("code", "")+"'/>";	} if(kids.length==0) html+="<metaLang code=''/>";	var kids=js.getChildElements("objLang"); for(var i=0; i<kids.length; i++) {		html+="<title lang='"+kids[i].getAttributeValue("code", "")+"'/>";	} if(kids.length==0) html+="<title lang=''/>";	html+="<homepage/>";	var kids=js.getChildElements("search"); for(var i=0; i<kids.length; i++) {		if(!kids[i].hasAttribute("lang"))  html+="<search/>";		else  html+="<search lang='"+kids[i].getAttributeValue("lang", "")+"'/>";	}	html+="</dictionary>";	if(parameter=="insideMe") Xonomy.newElementChild(htmlID, html); else if(parameter=="afterMe") Xonomy.newElementAfter(htmlID, html);}var docSpec={	onchange: function(){},	validate: function(jsElement){		if(typeof(jsElement)=="string") jsElement=Xonomy.xml2js(jsElement);		var valid=true;		var elementSpec=this.elements[jsElement.name];		if(elementSpec.validate) {			valid=elementSpec.validate(jsElement); //validate the element		}		for(var iAttribute=0; iAttribute<jsElement.attributes.length; iAttribute++) {			var jsAttribute=jsElement.attributes[iAttribute];			var attributeSpec=elementSpec.attributes[jsAttribute.name];			if(attributeSpec.validate) {				if(!attributeSpec.validate(jsAttribute)) valid=false; //validate the attribute			}		}		for(var iChild=0; iChild<jsElement.children.length; iChild++) {			if(jsElement.children[iChild].type=="element") {				var jsChild=jsElement.children[iChild];				if(!this.validate(jsChild)) valid=false; //recurse to the child element			}		}		if(!jsElement.parent()) {			$("#butSave").prop("disabled", !valid);		}		return valid;	},	elements: {		"dictionary": {			mustBeBefore: [],			mustBeAfter: ["objLang", "dicType", "metaLang", "title", "year", "homepage", "search"],			canDropTo: ["dictionary"],			collapsoid: function(jsMe){ return "..."; },			collapsed: function(jsMe){ return jsMe.parent()!=null; },			attributes: {				"prominence": {					asker: Xonomy.askPicklist,					askerParameter: [{value: "1", caption: "most prominent"}, "2", "3", "4", "5", "6", "7", "8", "9", {value: "10", caption: "least prominent"}],				},				"loginRequired": {					asker: Xonomy.askPicklist,					askerParameter: [{value: "0", caption: "no"}, {value: "1", caption: "yes"}],				},				"tcRequired": {					asker: Xonomy.askPicklist,					askerParameter: [{value: "0", caption: "no"}, {value: "1", caption: "yes"}],				},				"id": {isReadOnly: true},				"parentID": {isReadOnly: true},			},			menu: [{				caption: "Delete",				action: Xonomy.deleteElement,				hideIf: function(jsMe){ return !jsMe.parent(); },			}, {				caption: "Add <objLang>",				action: Xonomy.newElementChild,				actionParameter: "<objLang code=''/>",				hideIf: function(jsMe){ return jsMe.hasChildElement("objLang"); },			}, {				caption: "Add <dicType>",				action: Xonomy.newElementChild,				actionParameter: "<dicType code=''/>",				hideIf: function(jsMe){ return jsMe.hasChildElement("dicType"); },			}, {				caption: "Add <metaLang>",				action: Xonomy.newElementChild,				actionParameter: "<metaLang code=''/>",				hideIf: function(jsMe){ return jsMe.hasChildElement("metaLang"); },			}, {				caption: "Add <title>",				action: Xonomy.newElementChild,				actionParameter: "<title lang=''/>",				hideIf: function(jsMe){ return jsMe.hasChildElement("title"); },			}, {				caption: "Add <year>",				action: Xonomy.newElementChild,				actionParameter: "<year/>",				hideIf: function(jsMe){ return jsMe.hasChildElement("year"); },			}, {				caption: "Add <homepage>",				action: Xonomy.newElementChild,				actionParameter: "<homepage/>",				hideIf: function(jsMe){ return jsMe.hasChildElement("homepage"); },			}, {				caption: "Add <search>",				action: Xonomy.newElementChild,				actionParameter: "<search><searchUrl/></search>",				hideIf: function(jsMe){ return jsMe.hasChildElement("search"); },			}, {				caption: "Add an included <dictionary>",				action: addIncludedDictionary,				actionParameter: "insideMe",				hideIf: function(jsMe){ return jsMe.parent() || jsMe.hasAttribute("parentID"); },			}, {				caption: "Add another included <dictionary>",				action: addIncludedDictionary,				actionParameter: "afterMe",				hideIf: function(jsMe){ return !jsMe.parent(); },			}],		},		"objLang": {			mustBeBefore: ["dicType", "metaLang", "title", "year", "homepage", "search", "dictionary"],			mustBeAfter: [],			canDropTo: ["dictionary"],			attributes: {				"code": {					asker: Xonomy.askPicklist,					askerParameter: langs,					validate: function(jsMe){						if(jsMe.value=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This attribute should not be empty."}); return false; }						return true;					},				},			},			menu: [{				caption: "Delete",				action: Xonomy.deleteElement,				hideIf: function(jsMe){ return jsMe.parent().getChildElements("objLang").length==1; },			}, {				caption: "Add another <objLang>",				action: Xonomy.newElementAfter,				actionParameter: "<objLang code=''/>",			}],		},		"dicType": {			mustBeBefore: ["metaLang", "title", "year", "homepage", "search", "dictionary"],			mustBeAfter: ["objLang"],			canDropTo: ["dictionary"],			attributes: {				"code": {					asker: Xonomy.askPicklist,					askerParameter: dicTypes,					validate: function(jsMe){						if(jsMe.value=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This attribute should not be empty."}); return false; }						return true;					},				},			},			menu: [{				caption: "Delete",				action: Xonomy.deleteElement,				hideIf: function(jsMe){ return jsMe.parent().getChildElements("dicType").length==1; },			}, {				caption: "Add another <dicType>",				action: Xonomy.newElementAfter,				actionParameter: "<dicType code=''/>",			}],		},		"metaLang": {			mustBeBefore: ["title", "year", "homepage", "search", "dictionary"],			mustBeAfter: ["objLang", "dicType"],			canDropTo: ["dictionary"],			attributes: {				"code": {					asker: Xonomy.askPicklist,					askerParameter: langs,					validate: function(jsMe){						if(jsMe.value=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This attribute should not be empty."}); return false; }						return true;					},				},			},			menu: [{				caption: "Delete",				action: Xonomy.deleteElement,			}, {				caption: "Add another <metaLang>",				action: Xonomy.newElementAfter,				actionParameter: "<metaLang code=''/>",			}],		},		"title": {			mustBeBefore: ["year", "homepage", "search", "dictionary"],			mustBeAfter: ["objLang", "dicType", "metaLang"],			canDropTo: ["dictionary"],			hasText: true,			oneliner: true,			validate: function(jsMe){				if($.trim(jsMe.getText())=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This element should not be empty."}); return false; }				return true;			},			attributes: {				"lang": {					asker: Xonomy.askPicklist,					askerParameter: langs,					validate: function(jsMe){						if(jsMe.value=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This attribute should not be empty."}); return false; }						return true;					},				},			},			menu: [{				caption: "Delete",				action: Xonomy.deleteElement,				hideIf: function(jsMe){ return jsMe.parent().getChildElements("title").length==1; },			}, {				caption: "Add another <title>",				action: Xonomy.newElementAfter,				actionParameter: "<title lang=''/>",			}],			inlineMenu: [{				caption: "Mark as <abbrev>",				action: Xonomy.wrap,				actionParameter: {template: "<abbrev>$</abbrev>", placeholder: "$"},			}],		},		"abbrev": {			collapsible: false,			hasText: true,			oneliner: true,			validate: function(jsMe){				if($.trim(jsMe.getText())=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This element should not be empty."}); return false; }				return true;			},			menu: [{				caption: "Unmark",				action: Xonomy.unwrap,			}],		},		"year": {			mustBeBefore: ["homepage", "search", "dictionary"],			mustBeAfter: ["objLang", "dicType", "metaLang", "title"],			canDropTo: ["dictionary"],			hasText: true,			oneliner: true,			validate: function(jsMe){				if($.trim(jsMe.getText())=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This element should not be empty."}); return false; }				return true;			},			menu: [{				caption: "Delete",				action: Xonomy.deleteElement,			}],		},		"homepage": {			mustBeBefore: ["search", "dictionary"],			mustBeAfter: ["objLang", "dicType", "metaLang", "title", "year"],			canDropTo: ["dictionary"],			hasText: true,			oneliner: true,			validate: function(jsMe){				if($.trim(jsMe.getText())=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This element should not be empty."}); return false; }				if(!jsMe.getText().match(/^https?:\/\//)) { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This element should contain a URL starting with @http:// or @https://"}); return false; }				return true;			},		},		"search": {			mustBeBefore: ["dictionary"],			mustBeAfter: ["objLang", "dicType", "metaLang", "title", "year", "homepage"],			canDropTo: ["dictionary"],			hasText: false,			oneliner: false,			validate: function(jsMe){				if( jsMe.parent().getChildElements("search").length>1 && !jsMe.hasAttribute("lang") ) { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This element should have a @lang attribute."}); return false; }				//if(!jsMe.hasChildElement("word")) { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "The URL should contain <word> or there should be at least one value-less <postField>."}); return false; }				return true;			},			menu: [{				caption: "Delete",				action: Xonomy.deleteAttribute,			}, {				caption: "Add @lang",				action: Xonomy.newAttribute,				actionParameter: {name: "lang", value: ""},				hideIf: function(jsMe){ return jsMe.hasAttribute("lang"); },			}, {				caption: "Add <postField>",				action: Xonomy.newElementChild,				actionParameter: "<postField name=''/>",			}, {				caption: "Add another <search>",				action: Xonomy.newElementAfter,				actionParameter: "<search><searchUrl/></search>",			}],			attributes: {				"lang": {					asker: Xonomy.askPicklist,					askerParameter: langs,					validate: function(jsMe){						if(jsMe.value=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This attribute should not be empty."}); return false; }						return true;					},					menu: [{						caption: "Delete",						action: Xonomy.deleteAttribute,					}],				},			},		},		"postField": {			mustBeAfter: ["searchUrl"],			canDropTo: ["search"],			hasText: false,			menu: [{				caption: "Delete",				action: Xonomy.deleteElement,			}, {				caption: "Add @value",				action: Xonomy.newAttribute,				actionParameter: {name: "value", value: ""},				hideIf: function(jsMe){ return jsMe.hasAttribute("value"); },			}, {				caption: "Add another <postField>",				action: Xonomy.newElementAfter,				actionParameter: "<postField name=''/>",			}],			attributes: {				"name": {					asker: Xonomy.askString,					validate: function(jsMe){						if(jsMe.value=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This attribute should not be empty."}); return false; }						return true;					},				},				"value": {					asker: Xonomy.askString,					validate: function(jsMe){						if(jsMe.value=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This attribute should not be empty."}); return false; }						return true;					},					menu: [{						caption: "Delete",						action: Xonomy.deleteAttribute,					}],				},			},		},		"searchUrl": {			mustBeBefore: ["postField"],			hasText: true,			oneliner: true,			validate: function(jsMe){				if($.trim(jsMe.getText())=="") { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This element should not be empty."}); return false; }				if(!jsMe.getText().match(/^https?:\/\//)) { Xonomy.warnings.push({htmlID: jsMe.htmlID, text: "This element should contain a URL starting with @http:// or @https://"}); return false; }				return true;			},			inlineMenu: [{				caption: "Replace with <word/>",				action: Xonomy.wrap,				actionParameter: {template: "<word/>"},			}],		},		"word": {			collapsible: false,			oneliner: true,			menu: [{				caption: "Remove",				action: Xonomy.unwrap,			}],		},	},};